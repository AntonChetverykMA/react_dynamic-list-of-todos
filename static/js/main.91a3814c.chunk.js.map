{"version":3,"sources":["components/Todo/Todo.js","components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["Todo","props","todo","id","title","userId","completed","setSelectedUserId","setPressedUserBtn","pressedUserBtn","className","key","type","checked","readOnly","cn","onClick","defaultProps","options","TodoList","state","search","selected","filtredList","todos","todoCopy","filter","includes","this","list","value","placeholder","onChange","e","setState","target","name","map","option","length","React","Component","request","url","fetch","then","res","ok","Error","status","json","CurrentUser","user","error","getUser","prevProps","updateuser","console","log","data","email","phone","renderUser","App","selectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.91a3814c.chunk.js","sourcesContent":["/* eslint-disable comma-dangle */\n/* eslint-disable arrow-parens */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport function Todo(props) {\n  const {\n    todo: { id, title, userId, completed },\n    setSelectedUserId,\n    setPressedUserBtn,\n    pressedUserBtn,\n  } = props;\n\n  return (\n    <li\n      className={`TodoList__item ${\n        completed ? 'TodoList__item--checked' : 'TodoList__item--unchecked'\n      }`}\n      key={id}\n    >\n      <label>\n        <input type=\"checkbox\" checked={completed} readOnly />\n        <p>{title}</p>\n      </label>\n\n      <button\n        className={cn(\n          'TodoList__user-button',\n          { 'TodoList__user-button--selected': pressedUserBtn === id },\n          'button'\n        )}\n        type=\"button\"\n        onClick={() => {\n          setPressedUserBtn(id);\n          setSelectedUserId(userId);\n        }}\n      >\n        {`User #${userId}`}\n      </button>\n    </li>\n  );\n}\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    userId: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }),\n  setPressedUserBtn: PropTypes.func.isRequired,\n  pressedUserBtn: PropTypes.number,\n  setSelectedUserId: PropTypes.func.isRequired,\n};\n\nTodo.defaultProps = {\n  todo: {},\n  pressedUserBtn: 0,\n};\n","/* eslint-disable indent */\n/* eslint-disable react/jsx-indent */\n/* eslint-disable arrow-parens */\n/* eslint-disable comma-dangle */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nimport { Todo } from '../Todo';\n\nconst options = ['all', 'active', 'completed'];\n\nexport class TodoList extends React.Component {\n  state = {\n    search: '',\n    selected: 'all',\n  };\n\n  filtredList = () => {\n    const { todos } = this.props;\n    const { search, selected } = this.state;\n\n    if (todos) {\n      let todoCopy = [...todos];\n\n      if (selected === 'active') {\n        todoCopy = todoCopy.filter((todo) => todo.title && !todo.completed);\n      }\n\n      if (selected === 'completed') {\n        todoCopy = todoCopy.filter((todo) => todo.title && todo.completed);\n      }\n\n      return todoCopy.filter(\n        (todo) => todo.title && todo.title.includes(search)\n      );\n    }\n\n    return [];\n  };\n\n  render() {\n    const { setSelectedUserId, pressedUserBtn, setPressedUserBtn } = this.props;\n    const { search, selected } = this.state;\n    const list = this.filtredList();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <input\n          type=\"text\"\n          value={search}\n          placeholder=\"search\"\n          onChange={(e) => this.setState({ search: e.target.value })}\n        />\n\n        <select\n          name=\"select\"\n          value={selected}\n          onChange={(e) => this.setState({ selected: e.target.value })}\n        >\n          {options.map((option) => (\n            <option key={option}>{option}</option>\n          ))}\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {list.length > 0\n              ? list.map((todo) => (\n                  <Todo\n                    todo={todo}\n                    setSelectedUserId={setSelectedUserId}\n                    pressedUserBtn={pressedUserBtn}\n                    setPressedUserBtn={setPressedUserBtn}\n                    key={todo.id}\n                  />\n                ))\n              : 'No todos'}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n    })\n  ),\n  setSelectedUserId: PropTypes.func.isRequired,\n  setPressedUserBtn: PropTypes.func.isRequired,\n  pressedUserBtn: PropTypes.number,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n  pressedUserBtn: 0,\n};\n","/* eslint-disable arrow-body-style */\n/* eslint-disable arrow-parens */\nconst BASE_URL = 'https://mate-api.herokuapp.com/';\n\nexport const request = (url, options) => {\n  return fetch(`${BASE_URL}${url}`, options).then((res) => {\n    if (!res.ok) {\n      throw new Error(`${res.status}`);\n    }\n\n    return res.json();\n  });\n};\n","/* eslint-disable no-console */\n/* eslint-disable arrow-parens */\nimport React from 'react';\nimport './CurrentUser.scss';\n\nimport PropTypes from 'prop-types';\nimport { request } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n    error: false,\n  };\n\n  componentDidMount() {\n    const { userId } = this.props;\n\n    this.getUser(userId);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { userId } = this.props;\n\n    if (prevProps.userId !== this.props.userId) {\n      this.updateuser(userId);\n    }\n  }\n\n  componentWillUnmount() {\n    console.log('cwu');\n  }\n\n  getUser(userId) {\n    request(`users/${userId}`).then((res) => {\n      if (res.data) {\n        this.setState({\n          user: res.data,\n          error: false,\n        });\n      } else {\n        this.setState({\n          user: {},\n          error: true,\n        });\n      }\n    });\n  }\n\n  updateuser(userId) {\n    this.setState({ user: null });\n    this.getUser(userId);\n  }\n\n  renderUser(user) {\n    const { setSelectedUserId, setPressedUserBtn } = this.props;\n    const { error } = this.state;\n\n    return error ? (\n      'Such user does not exist'\n    ) : (\n      <>\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:&nbsp;\n            {this.props.userId}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          type=\"button\"\n          className=\"clear-btn\"\n          onClick={() => {\n            setSelectedUserId(0);\n            setPressedUserBtn(0);\n          }}\n        >\n          Clear\n        </button>\n      </>\n    );\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        {user ? (\n          this.renderUser(user)\n        ) : (\n          <div className=\"loading\">Loading...</div>\n        )}\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number,\n  setSelectedUserId: PropTypes.func.isRequired,\n  setPressedUserBtn: PropTypes.func.isRequired,\n};\n\nCurrentUser.defaultProps = {\n  userId: 0,\n};\n","/* eslint-disable arrow-parens */\nimport React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { request } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 2,\n    pressedUserBtn: 0,\n  };\n\n  componentDidMount() {\n    request('todos').then((todos) => this.setState({ todos: todos.data }));\n  }\n\n  setSelectedUserId = (id) => {\n    this.setState({ selectedUserId: id });\n  };\n\n  setPressedUserBtn = (id) => {\n    this.setState({ pressedUserBtn: id });\n  };\n\n  render() {\n    const { todos, selectedUserId, pressedUserBtn } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            setSelectedUserId={this.setSelectedUserId}\n            pressedUserBtn={pressedUserBtn}\n            setPressedUserBtn={this.setPressedUserBtn}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                setSelectedUserId={this.setSelectedUserId}\n                setPressedUserBtn={this.setPressedUserBtn}\n              />\n            ) : (\n              'No user selected'\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}